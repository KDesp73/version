#!/usr/bin/env bash

main() {
    if [ "$#" == 0 ]; then
        ERRO "A command or an option  is always expected" >&2
        command_help
        exit 1
    fi

    while [[ $# -gt 0 ]]; do
        arg="$1"
        case $arg in
            -h|--help) 
                command_help
                shift
                ;;
            -v|--version) 
                command_version 
                shift
                ;;
            "init")
                command_init
                shift
                ;;
            "update")
                shift
                command_update "$1"
                shift
                ;;
            "generate")
                shift
                command_generate "$1"
                shift
                ;;
            *)
                echo "Unknown command: $arg" >&2
                command_help
                exit 1
        esac
    done
}

# Config

VERSION_FILE=".version.conf"
VERSION="0.1.0"

# Logging

LOG () {
    echo "[$1] $2"
}
INFO () {
    LOG "INFO" "$1"
}
ERRO () {
    LOG "ERRO" "$1"
}
WARN () {
    LOG "WARN" "$1"
}
DEBU () {
    LOG "DEBU" "$1"
}

# Utils

list_files() {
    local gitignore_file=".gitignore"
    local ignored=("$@")

    # Add patterns from .gitignore if it exists
    if [[ -f "$gitignore_file" ]]; then
        while IFS= read -r line || [[ -n "$line" ]]; do
            [[ -z "$line" || "$line" == \#* ]] && continue
            ignored+=("$line")
        done < "$gitignore_file"
    fi

    ignored+=(".git")

    # Build the find command
    local find_command="find . -type f"

    for ignore in "${ignored[@]}"; do
        # Handle patterns that are directories or general patterns
        find_command+=" -not -path './$ignore' -not -path './$ignore/*'"
    done

    eval "$find_command"
}

# Commands

command_init() {
    if [[ -f "$VERSION_FILE" ]]; then
        ERRO "$VERSION_FILE already exists in this directory"
    else 
        touch "$VERSION_FILE"
        INFO "$VERSION_FILE created"
    fi
}

command_update() {
    version="$1"
    files=$(list_files)

    DEBU "new version: $version"
    echo "$files"
}

command_help() {
    cat <<EOF
USAGE
    version <COMMAND> [<OPTIONS>...]

COMMANDS
    init                Initializes the version config file
    update              Update the project version
    generate            Generate various files for the tool

OPTIONS
    -h --help           Prints this message
    -v --version        Prints the version tool's version

Made by KDesp73 <despoinidisk@gmail.com>
EOF
}

command_generate() { 
    value="$1"
    INFO "Generating $1...";

    case "$value" in
        "autocomplete")
            BASH_AUTOCOMPLETE_PATH="/etc/bash_completion.d/version.bash"
            ZSH_AUTOCOMPLETE_PATH="/usr/share/zsh/functions/Completion/_version"
            FISH_AUTOCOMPLETE_PATH="/etc/fish/conf.d/version.fish"
            curl -s https://raw.githubusercontent.com/KDesp73/version/main/docs/autocomplete/version.zsh -o "$ZSH_AUTOCOMPLETE_PATH"
            curl -s https://raw.githubusercontent.com/KDesp73/version/main/docs/autocomplete/version.bash -o "$BASH_AUTOCOMPLETE_PATH"
            curl -s https://raw.githubusercontent.com/KDesp73/version/main/docs/autocomplete/version.fish -o "$FISH_AUTOCOMPLETE_PATH"
            ;;
        "man")
            ERRO "Not implemented yet."
            ;;
        *)
            ERRO "Unknown value: $value"
            exit 1
    esac
}

command_version() {
    echo "version v$VERSION"
}

main "$@"
